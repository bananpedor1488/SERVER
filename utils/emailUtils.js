// –†–µ–∑–µ—Ä–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è emailUtils –±–µ–∑ nodemailer
console.log('üîß Loading emailUtils.js (fallback mode)...');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
const generateVerificationCode = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
const createTransporter = () => {
  console.log('‚ö†Ô∏è  Using fallback email transporter (no actual email sending)');
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  return {
    sendMail: async (options) => {
      console.log('üìß [FALLBACK] Email would be sent:', {
        to: options.to,
        subject: options.subject,
        text: options.text
      });
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
      return {
        messageId: 'fallback-message-id',
        response: 'OK'
      };
    },
    verify: async () => {
      console.log('‚úÖ [FALLBACK] Email connection verified (simulated)');
      return true;
    }
  };
};



// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email (–∑–∞–≥–ª—É—à–∫–∞)
const sendVerificationEmail = async (email, code) => {
  try {
    console.log(`üìß [FALLBACK] Sending verification email to: ${email}`);
    console.log(`üî¢ [FALLBACK] Verification code: ${code}`);
    
    const transporter = createTransporter();
    
    const mailOptions = {
      from: process.env.EMAIL_USER || 'noreply@socialspace.com',
      to: email,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - SocialSpace',
      text: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h1>SocialSpace</h1>
          <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
          <p>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <strong>${code}</strong></p>
          <p style="color: red;">‚ö†Ô∏è  –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è</p>
        </div>
      `
    };
    
    await transporter.sendMail(mailOptions);
    console.log('‚úÖ [FALLBACK] Verification email "sent" successfully');
    return true;
  } catch (error) {
    console.error('‚ùå [FALLBACK] Error sending verification email:', error.message);
    return false;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)
const resendVerificationEmail = async (email, code) => {
  return sendVerificationEmail(email, code);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ email —Å–µ—Ä–≤–∏—Å—É (–∑–∞–≥–ª—É—à–∫–∞)
const testEmailConnection = async () => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('‚úÖ [FALLBACK] Email connection verified successfully');
    return true;
  } catch (error) {
    console.error('‚ùå [FALLBACK] Email connection failed:', error.message);
    return false;
  }
};

module.exports = {
  generateVerificationCode,
  sendVerificationEmail,
  resendVerificationEmail,
  testEmailConnection
};
