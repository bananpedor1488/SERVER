const nodemailer = require('nodemailer');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ nodemailer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
if (!nodemailer || typeof nodemailer.createTransporter !== 'function') {
  console.error('‚ùå Nodemailer import error:', {
    nodemailer: typeof nodemailer,
    createTransporter: typeof nodemailer?.createTransporter
  });
  throw new Error('Nodemailer is not properly imported. Please check installation.');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
const generateVerificationCode = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const createTransporter = () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.EMAIL_USER || !process.env.EMAIL_PASSWORD) {
    console.error('‚ùå Email configuration missing:');
    console.error('   EMAIL_USER:', process.env.EMAIL_USER ? '‚úÖ Set' : '‚ùå Missing');
    console.error('   EMAIL_PASSWORD:', process.env.EMAIL_PASSWORD ? '‚úÖ Set' : '‚ùå Missing');
    throw new Error('Email configuration is missing. Please check your .env file.');
  }

  console.log('üìß Creating email transporter with:', {
    service: 'gmail',
    user: process.env.EMAIL_USER,
    password: process.env.EMAIL_PASSWORD ? '***' : 'Missing'
  });

  try {
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD
      }
    });
    
    console.log('‚úÖ Email transporter created successfully');
    return transporter;
  } catch (error) {
    console.error('‚ùå Error creating email transporter:', error);
    throw error;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ email —Å–µ—Ä–≤–∏—Å—É
const testEmailConnection = async () => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('‚úÖ Email connection verified successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Email connection failed:', error.message);
    return false;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email
const sendVerificationEmail = async (email, code) => {
  try {
    console.log(`üìß Sending verification email to: ${email}`);
    console.log(`üî¢ Verification code: ${code}`);
    
    const transporter = createTransporter();
    
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - SocialSpace',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center; color: white;">
            <h1 style="margin: 0;">SocialSpace</h1>
            <p style="margin: 10px 0 0 0;">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</p>
          </div>
          
          <div style="padding: 30px; background: #f9f9f9;">
            <h2 style="color: #333; margin-bottom: 20px;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SocialSpace!</h2>
            
            <p style="color: #666; line-height: 1.6; margin-bottom: 25px;">
              –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
            </p>
            
            <div style="background: white; border: 2px solid #667eea; border-radius: 10px; padding: 20px; text-align: center; margin: 20px 0;">
              <h1 style="color: #667eea; font-size: 32px; margin: 0; letter-spacing: 5px; font-family: 'Courier New', monospace;">
                ${code}
              </h1>
            </div>
            
            <p style="color: #666; font-size: 14px; margin-top: 20px;">
              –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ SocialSpace, 
              –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
            </p>
          </div>
          
          <div style="background: #333; color: white; padding: 15px; text-align: center; font-size: 12px;">
            <p style="margin: 0;">¬© 2024 SocialSpace. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          </div>
        </div>
      `
    };
    
    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Verification email sent successfully:', {
      messageId: result.messageId,
      to: email,
      code: code
    });
    return true;
  } catch (error) {
    console.error('‚ùå Error sending verification email:', {
      error: error.message,
      code: error.code,
      command: error.command,
      to: email
    });
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    if (error.code === 'EAUTH') {
      console.error('üîê Authentication failed. Check your EMAIL_USER and EMAIL_PASSWORD');
    } else if (error.code === 'ECONNECTION') {
      console.error('üåê Connection failed. Check your internet connection');
    } else if (error.code === 'ETIMEDOUT') {
      console.error('‚è∞ Connection timeout. Try again later');
    }
    
    return false;
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ
const resendVerificationEmail = async (email, code) => {
  try {
    console.log(`üìß Resending verification email to: ${email}`);
    console.log(`üî¢ New verification code: ${code}`);
    
    const transporter = createTransporter();
    
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: '–ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - SocialSpace',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; text-align: center; color: white;">
            <h1 style="margin: 0;">SocialSpace</h1>
            <p style="margin: 10px 0 0 0;">–ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</p>
          </div>
          
          <div style="padding: 30px; background: #f9f9f9;">
            <h2 style="color: #333; margin-bottom: 20px;">–ù–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
            
            <p style="color: #666; line-height: 1.6; margin-bottom: 25px;">
              –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
            </p>
            
            <div style="background: white; border: 2px solid #667eea; border-radius: 10px; padding: 20px; text-align: center; margin: 20px 0;">
              <h1 style="color: #667eea; font-size: 32px; margin: 0; letter-spacing: 5px; font-family: 'Courier New', monospace;">
                ${code}
              </h1>
            </div>
            
            <p style="color: #666; font-size: 14px; margin-top: 20px;">
              –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.
            </p>
          </div>
          
          <div style="background: #333; color: white; padding: 15px; text-align: center; font-size: 12px;">
            <p style="margin: 0;">¬© 2024 SocialSpace. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          </div>
        </div>
      `
    };
    
    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Resend verification email sent successfully:', {
      messageId: result.messageId,
      to: email,
      code: code
    });
    return true;
  } catch (error) {
    console.error('‚ùå Error resending verification email:', {
      error: error.message,
      code: error.code,
      command: error.command,
      to: email
    });
    return false;
  }
};

module.exports = {
  generateVerificationCode,
  sendVerificationEmail,
  resendVerificationEmail,
  testEmailConnection
};
