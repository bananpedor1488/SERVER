const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GitLab
const GITLAB_TOKEN = 'glpat-HSRmN5i2RM7pbzVu9YZZK286MQp1Omh2N2ZlCw.01.1214lr8of';
const GITLAB_URL = 'https://gitlab.com';

// –°–æ–∑–¥–∞–µ–º axios instance –¥–ª—è GitLab API
const gitlabApi = axios.create({
  baseURL: `${GITLAB_URL}/api/v4`,
  headers: {
    'Authorization': `Bearer ${GITLAB_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

async function testGitLabConnection() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω - –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω...');
    try {
      const userResponse = await gitlabApi.get('/user');
      console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userResponse.data.name} (${userResponse.data.username})`);
      console.log(`üìß Email: ${userResponse.data.email}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:', error.response?.status, error.response?.data?.message || error.message);
      return;
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\n2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    try {
      const projectsResponse = await gitlabApi.get('/projects', {
        params: {
          membership: true,
          per_page: 20,
          order_by: 'updated_at',
          sort: 'desc'
        }
      });
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsResponse.data.length}`);
      
      if (projectsResponse.data.length > 0) {
        console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:');
        projectsResponse.data.forEach((project, index) => {
          console.log(`${index + 1}. ${project.name} (ID: ${project.id})`);
          console.log(`   –ü—É—Ç—å: ${project.path_with_namespace}`);
          console.log(`   –í–∏–¥–∏–º–æ—Å—Ç—å: ${project.visibility}`);
          console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${project.last_activity_at}`);
          console.log('');
        });
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        const firstProject = projectsResponse.data[0];
        console.log(`üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: ${firstProject.name} (ID: ${firstProject.id})`);
        console.log(`   –û–±–Ω–æ–≤–∏—Ç–µ GITLAB_PROJECT_ID –≤ gitlabUpload.js –Ω–∞: ${firstProject.id}`);
      } else {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ GitLab.');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.response?.status, error.response?.data?.message || error.message);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
    const configProjectId = '796e02a65991f829fb08189b820390acbef4f11c';
    try {
      const projectResponse = await gitlabApi.get(`/projects/${configProjectId}`);
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç ${configProjectId} –Ω–∞–π–¥–µ–Ω: ${projectResponse.data.name}`);
      console.log(`   –ü—É—Ç—å: ${projectResponse.data.path_with_namespace}`);
      console.log(`   –í–∏–¥–∏–º–æ—Å—Ç—å: ${projectResponse.data.visibility}`);
    } catch (error) {
      console.error(`‚ùå –ü—Ä–æ–µ–∫—Ç ${configProjectId} –Ω–µ –Ω–∞–π–¥–µ–Ω:`, error.response?.status, error.response?.data?.message || error.message);
      
      if (error.response?.status === 404) {
        console.log('üí° –ü—Ä–æ–µ–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É.');
        console.log('   –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ GitLab –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.');
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å...');
    try {
      const projectsResponse = await gitlabApi.get('/projects', {
        params: {
          membership: true,
          per_page: 1
        }
      });
      
      if (projectsResponse.data.length > 0) {
        const testProject = projectsResponse.data[0];
        console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: ${testProject.name}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤–µ—Ç–∫—É main
        try {
          const branchResponse = await gitlabApi.get(`/projects/${testProject.id}/repository/branches/main`);
          console.log(`‚úÖ –í–µ—Ç–∫–∞ main –¥–æ—Å—Ç—É–ø–Ω–∞`);
          console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${branchResponse.data.commit.short_id}`);
        } catch (error) {
          console.log(`‚ö†Ô∏è –í–µ—Ç–∫–∞ main –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.response?.data?.message || error.message}`);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGitLabConnection();
