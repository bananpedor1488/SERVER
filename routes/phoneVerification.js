// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const express = require('express');
const router = express.Router();
const auth = require('../middleware/auth');
const { verifyCode, getVerificationStatus } = require('../telegram-bot');

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
router.get('/status', auth, async (req, res) => {
  try {
    const status = await getVerificationStatus(req.user.id);
    
    if (!status.success) {
      return res.status(400).json({ 
        success: false, 
        message: status.message 
      });
    }
    
    res.json({
      success: true,
      phoneVerified: status.phoneVerified,
      phoneNumber: status.phoneNumber,
      phoneVerifiedAt: status.phoneVerifiedAt
    });
    
  } catch (error) {
    console.error('‚ùå Error getting phone verification status:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏' 
    });
  }
});

// –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –∫–æ–¥—É
router.post('/verify', auth, async (req, res) => {
  try {
    const { code } = req.body;
    
    if (!code) {
      return res.status(400).json({ 
        success: false, 
        message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
    if (isNaN(code) || code.length < 5) {
      return res.status(400).json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏' 
      });
    }
    
    const result = await verifyCode(code, req.user.id);
    
    if (!result.success) {
      return res.status(400).json({ 
        success: false, 
        message: result.message 
      });
    }
    
    res.json({
      success: true,
      message: result.message,
      phoneNumber: result.phoneNumber
    });
    
  } catch (error) {
    console.error('‚ùå Error verifying phone code:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞' 
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.get('/instructions', auth, async (req, res) => {
  try {
    const status = await getVerificationStatus(req.user.id);
    
    if (status.success && status.phoneVerified) {
      return res.json({
        success: true,
        verified: true,
        message: '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
        phoneNumber: status.phoneNumber
      });
    }
    
    const instructions = {
      success: true,
      verified: false,
      message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      steps: [
        {
          step: 1,
          title: '–û—Ç–∫—Ä–æ–π—Ç–µ Telegram',
          description: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ'
        },
        {
          step: 2,
          title: '–ù–∞–π–¥–∏—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞',
          description: '–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @SocialSpaceVerificationBot –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ'
        },
        {
          step: 3,
          title: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç',
          description: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É'
        },
        {
          step: 4,
          title: '–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥',
          description: '–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç)'
        },
        {
          step: 5,
          title: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ',
          description: '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ'
        }
      ],
             botUsername: 'SocialSpaceWEB_bot',
       botLink: 'https://t.me/SocialSpaceWEB_bot'
    };
    
    res.json(instructions);
    
  } catch (error) {
    console.error('‚ùå Error getting verification instructions:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π' 
    });
  }
});

module.exports = router;
