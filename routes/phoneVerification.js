// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const express = require('express');
const router = express.Router();
const { verifyCode, getVerificationStatus, linkUserToChat, autoVerifyPhoneNumber } = require('../telegram-bot');

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
router.get('/status', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if (!req.user || !req.user.id) {
      console.error('‚ùå User not authenticated in /status');
      return res.status(401).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' 
      });
    }
    
    console.log('üîç Checking verification status for user:', req.user.id);
    const status = await getVerificationStatus(req.user.id);
    
    if (!status.success) {
      return res.status(400).json({ 
        success: false, 
        message: status.message 
      });
    }
    
    res.json({
      success: true,
      phoneVerified: status.phoneVerified,
      phoneNumber: status.phoneNumber,
      phoneVerifiedAt: status.phoneVerifiedAt
    });
    
  } catch (error) {
    console.error('‚ùå Error getting phone verification status:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏' 
    });
  }
});

// –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –∫–æ–¥—É
router.post('/verify', async (req, res) => {
  try {
    const { code } = req.body;
    
    if (!code) {
      return res.status(400).json({ 
        success: false, 
        message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
    if (isNaN(code) || code.length < 5) {
      return res.status(400).json({ 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏' 
      });
    }
    
    const result = await verifyCode(code, req.user.id);
    
    if (!result.success) {
      return res.status(400).json({ 
        success: false, 
        message: result.message 
      });
    }
    
    res.json({
      success: true,
      message: result.message,
      phoneNumber: result.phoneNumber
    });
    
  } catch (error) {
    console.error('‚ùå Error verifying phone code:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞' 
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.get('/instructions', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if (!req.user || !req.user.id) {
      console.error('‚ùå User not authenticated in /instructions');
      return res.status(401).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' 
      });
    }
    
    console.log('üìã Getting instructions for user:', req.user.id);
    const status = await getVerificationStatus(req.user.id);
    
    if (status.success && status.phoneVerified) {
      return res.json({
        success: true,
        verified: true,
        message: '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
        phoneNumber: status.phoneNumber
      });
    }
    
    const instructions = {
      success: true,
      verified: false,
      message: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      steps: [
        {
          step: 1,
          title: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞"',
          description: '–û—Ç–∫—Ä–æ–µ—Ç—Å—è Telegram —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º'
        },
        {
          step: 2,
          title: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
          description: '–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        },
        {
          step: 3,
          title: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"',
          description: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞'
        },
        {
          step: 4,
          title: '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
          description: '–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç - –≤–∞—à –Ω–æ–º–µ—Ä —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
        }
      ],
      botUsername: 'SocialSpaceWEB_bot',
      botLink: 'https://t.me/SocialSpaceWEB_bot',
      autoVerification: true
    };
    
    res.json(instructions);
    
  } catch (error) {
    console.error('‚ùå Error getting verification instructions:', error);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π' 
    });
  }
});

// –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.post('/start-auto-verification', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    if (!req.user || !req.user.id) {
      console.error('‚ùå User not authenticated in /start-auto-verification');
      return res.status(401).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' 
      });
    }
    
    const userId = req.user.id;
    console.log('üöÄ Starting auto-verification for user:', userId);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π chatId –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const chatId = `user_${userId}_${Date.now()}`;
    
    // –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId
    const linkResult = await linkUserToChat(userId, chatId);
    
    if (!linkResult.success) {
      return res.status(400).json({
        success: false,
        message: linkResult.message
      });
    }
    
    res.json({
      success: true,
      message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞',
      botLink: 'https://t.me/SocialSpaceWEB_bot',
      chatId: chatId
    });
    
  } catch (error) {
    console.error('‚ùå Error starting auto-verification:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
    });
  }
});

module.exports = router;
