const express = require('express');
const mongoose = require('mongoose');
const User = require('../models/User');
const Post = require('../models/Post');
const Comment = require('../models/Comment');
const Follow = require('../models/Follow');

const router = express.Router();

// –ú–∏–¥–ª–≤–∞—Ä–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const isAuth = (req, res, next) => {
  if (!req.session.user) return res.Status(401).json({ message: 'Not authorized' });
  next();
};

// üîπ –í–ê–ñ–ù–û: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–û –º–∞—Ä—à—Ä—É—Ç–∞ /:id
router.get('/search', isAuth, async (req, res) => {
  try {
    const query = req.query.query?.trim();
    
    if (!query) {
      return res.status(400).json({ message: 'Query parameter is required' });
    }

    const users = await User.find({ 
      username: new RegExp(query, 'i') 
    }).select('username followers following');
    
    if (users.length === 0) {
      return res.status(404).json({ message: 'No users found' });
    }
    
    res.json(users);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get('/suggestions', isAuth, async (req, res) => {
  try {
    const currentUserId = req.session.user.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    const currentUser = await User.findById(currentUserId);
    const followingIds = currentUser.following;
    
    const suggestions = await User.find({
      _id: { 
        $nin: [...followingIds, currentUserId] // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
      }
    })
    .select('username followers following')
    .limit(10)
    .sort({ 'followers.length': -1 }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö
    const suggestionsWithStats = suggestions.map(user => ({
      _id: user._id,
      username: user.username,
      followersCount: user.followers.length,
      followingCount: user.following.length,
      followed: false // –ü–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    }));

    res.json(suggestionsWithStats);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï /search –∏ /suggestions)
router.get('/:id', isAuth, async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ message: 'Invalid user ID' });
    }

    const user = await User.findById(req.params.id).select('username followers following');
    if (!user) return res.status(404).json({ message: 'User not found' });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUserId = req.session.user.id;
    const isFollowed = user.followers.includes(currentUserId);

    res.json({
      _id: user._id,
      username: user.username,
      followersCount: user.followers.length,
      followingCount: user.following.length,
      followed: isFollowed
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
router.get('/:id/posts', isAuth, async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ message: 'Invalid user ID' });
    }

    const posts = await Post.find({ author: req.params.id })
      .sort({ createdAt: -1 })
      .populate('author', 'username');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
    const postsWithComments = await Promise.all(
      posts.map(async (post) => {
        const comments = await Comment.find({ post: post._id })
          .sort({ createdAt: 1 })
          .populate('author', 'username')
          .limit(5); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

        const commentsCount = await Comment.countDocuments({ post: post._id });

        return {
          ...post.toObject(),
          comments: comments,
          commentsCount: commentsCount
        };
      })
    );

    res.json(postsWithComments);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// üîπ –ü–æ–¥–ø–∏—Å–∫–∞ / –æ—Ç–ø–∏—Å–∫–∞
router.post('/follow/:id', isAuth, async (req, res) => {
  try {
    const targetId = req.params.id;
    const userId = req.session.user.id;

    if (!mongoose.Types.ObjectId.isValid(targetId)) {
      return res.status(400).json({ message: 'Invalid user ID' });
    }

    if (userId === targetId) {
      return res.status(400).json({ message: '–ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–±—è' });
    }

    const user = await User.findById(userId);
    const target = await User.findById(targetId);

    if (!target) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const isFollowing = user.following.includes(targetId);

    if (isFollowing) {
      user.following.pull(targetId);
      target.followers.pull(userId);
    } else {
      user.following.push(targetId);
      target.followers.push(userId);
    }

    await user.save();
    await target.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Socket.IO
    const io = req.app.get('io');
    io.to('general').emit('followUpdate', {
      targetUserId: targetId,
      followerId: userId,
      followed: !isFollowing,
      followersCount: target.followers.length
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å
    if (!isFollowing) {
      io.to(`user_${targetId}`).emit('newFollower', {
        follower: {
          id: userId,
          username: user.username
        }
      });
    }

    res.json({ 
      following: !isFollowing,
      followersCount: target.followers.length,
      followingCount: user.following.length
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/:id/followers', isAuth, async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ message: 'Invalid user ID' });
    }

    const user = await User.findById(req.params.id)
      .populate('followers', 'username followers following');
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    const followersWithStats = user.followers.map(follower => ({
      _id: follower._id,
      username: follower.username,
      followersCount: follower.followers.length,
      followingCount: follower.following.length
    }));

    res.json(followersWithStats);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/:id/following', isAuth, async (req, res) => {
  try {
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
      return res.status(400).json({ message: 'Invalid user ID' });
    }

    const user = await User.findById(req.params.id)
      .populate('following', 'username followers following');
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    const followingWithStats = user.following.map(following => ({
      _id: following._id,
      username: following.username,
      followersCount: following.followers.length,
      followingCount: following.following.length
    }));

    res.json(followingWithStats);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;