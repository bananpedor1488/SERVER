// Telegram –±–æ—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤

const TelegramBot = require('node-telegram-bot-api');
const mongoose = require('mongoose');
const User = require('./models/User');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞
const token = '8481849743:AAHOM7yAhs3evhou_rHxR5ktJwVsWxZfwrc';

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
const userStates = new Map();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const checkDBConnection = async () => {
  try {
    if (mongoose.connection.readyState === 1) {
      return true;
    } else {
      return false;
    }
  } catch (error) {
    console.error('MongoDB connection check error:', error);
    return false;
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || msg.from.first_name;
  
  const welcomeMessage = `
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SocialSpace!**

–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.

üì± –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è:
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏

_–í–∞—à –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏._
_–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!_
  `;
  
  const keyboard = {
    reply_markup: {
      keyboard: [
        [{
          text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
          request_contact: true
        }]
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
  bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', keyboard);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on('contact', async (msg) => {
  const chatId = msg.chat.id;
  const contact = msg.contact;
  const username = msg.from.username || msg.from.first_name;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (contact.user_id !== msg.from.id) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–∞–∫—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –≤–∞–º.');
      return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    let phoneNumber = contact.phone_number;
    if (phoneNumber.startsWith('+')) {
      phoneNumber = phoneNumber.substring(1);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const existingUser = await User.findOne({ 
      phoneNumber: phoneNumber,
      phoneVerified: true 
    });
    
    if (existingUser) {
      bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(chatId, {
      phoneNumber: phoneNumber,
      username: username,
      timestamp: Date.now()
    });
    
    const successMessage = `
üéâ **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +${phoneNumber} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç SocialSpace - –≤–∞—à –Ω–æ–º–µ—Ä —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üöÄ
    `;
    
    bot.sendMessage(chatId, successMessage, { 
      parse_mode: 'Markdown',
      reply_markup: {
        remove_keyboard: true
      }
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç—Ç–∏–º chatId
    await autoVerifyPhoneNumber(chatId, phoneNumber);
    
  } catch (error) {
    console.error('Error processing contact:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
  if (msg.text && !msg.text.startsWith('/')) {
    bot.sendMessage(chatId, 'üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ
const verifyCode = async (code, userId) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
    const userState = userStates.get(parseInt(code));
    
    if (!userState) {
      return { success: false, message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–¥–∞ (10 –º–∏–Ω—É—Ç)
    const now = Date.now();
    const codeAge = now - userState.timestamp;
    const maxAge = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
    
    if (codeAge > maxAge) {
      userStates.delete(parseInt(code));
      return { success: false, message: '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' };
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const user = await User.findById(userId);
    if (!user) {
      return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ
    const existingUser = await User.findOne({ 
      phoneNumber: userState.phoneNumber,
      phoneVerified: true,
      _id: { $ne: userId }
    });
    
    if (existingUser) {
      return { success: false, message: '–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' };
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.phoneNumber = userState.phoneNumber;
    user.phoneVerified = true;
    user.phoneVerifiedAt = new Date();
    await user.save();
    
    // –£–¥–∞–ª—è–µ–º –∫–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    userStates.delete(parseInt(code));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const successMessage = `
üéâ **–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +${userState.phoneNumber} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ SocialSpace.

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üöÄ
    `;
    
    bot.sendMessage(parseInt(code), successMessage, { parse_mode: 'Markdown' });
    
    return { 
      success: true, 
      message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω',
      phoneNumber: userState.phoneNumber
    };
    
  } catch (error) {
    console.error('Error verifying code:', error);
    return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞' };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
const getVerificationStatus = async (userId) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    return {
      success: true,
      phoneVerified: user.phoneVerified || false,
      phoneNumber: user.phoneNumber || null,
      phoneVerifiedAt: user.phoneVerifiedAt || null
    };
  } catch (error) {
    console.error('Error getting verification status:', error);
    return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞' };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const autoVerifyPhoneNumber = async (chatId, phoneNumber) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatId (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
    let users = await User.find({ 
      telegramChatId: chatId,
      phoneVerified: false 
    });
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ chatId, –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (users.length === 0) {
      users = await User.find({ 
        phoneNumber: phoneNumber,
        phoneVerified: false 
      });
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    if (users.length === 0) {
      users = await User.find({ 
        phoneNumber: { $exists: false },
        phoneVerified: false 
      });
    }
    
    if (users.length > 0) {
      // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      for (const user of users) {
        user.phoneNumber = phoneNumber;
        user.phoneVerified = true;
        user.phoneVerifiedAt = new Date();
        user.telegramChatId = chatId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId –¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π
        await user.save();
      }
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const tempUser = new User({
        phoneNumber: phoneNumber,
        phoneVerified: true,
        phoneVerifiedAt: new Date(),
        telegramChatId: chatId,
        username: `temp_${chatId}`,
        email: `temp_${chatId}@temp.com`,
        emailVerified: true // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º email –¥–ª—è temp –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      });
      
      await tempUser.save();
    }
    
    return { success: true, message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' };
  } catch (error) {
    console.error('Error auto-verifying phone number:', error);
    return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏' };
  }
};

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–¥–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  const maxAge = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
  
  for (const [code, state] of userStates.entries()) {
    if (now - state.timestamp > maxAge) {
      userStates.delete(code);
    }
  }
}, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('Telegram bot error:', error);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limiting (429)
  if (error.code === 'ETELEGRAM' && error.response && error.response.statusCode === 429) {
    const retryAfter = error.response.headers['retry-after'] || 60;
    
    setTimeout(() => {
      // Retry logic
    }, retryAfter * 1000);
    return;
  }
  
  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
  if (error.code === 'ETELEGRAM' && error.response && error.response.statusCode === 409) {
    setTimeout(() => {
      try {
        bot.stopPolling();
        setTimeout(() => {
          bot.startPolling();
        }, 2000);
      } catch (restartError) {
        console.error('Failed to restart bot:', restartError);
      }
    }, 1000);
  }
});

bot.on('polling_error', (error) => {
  console.error('Telegram bot polling error:', error);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limiting (429)
  if (error.code === 'ETELEGRAM' && error.response && error.response.statusCode === 429) {
    const retryAfter = error.response.headers['retry-after'] || 60;
    
    setTimeout(() => {
      // Retry logic
    }, retryAfter * 1000);
    return;
  }
  
  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
  if (error.code === 'ETELEGRAM' && error.response && error.response.statusCode === 409) {
    setTimeout(() => {
      try {
        bot.stopPolling();
        setTimeout(() => {
          bot.startPolling();
        }, 2000);
      } catch (restartError) {
        console.error('Failed to restart bot polling:', restartError);
      }
    }, 1000);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞
const forceStopBot = async () => {
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if (bot && typeof bot.stopPolling === 'function') {
      try {
        bot.stopPolling();
      } catch (pollingError) {
        // Polling might already be stopped
      }
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if (bot && typeof bot.stopWebhook === 'function') {
      try {
        bot.stopWebhook();
      } catch (webhookError) {
        // Webhook might already be stopped
      }
    }
    
    // –î–ª—è node-telegram-bot-api —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å close()
    // –ù–æ –±—É–¥–µ–º –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —ç—Ç–∏–º –º–µ—Ç–æ–¥–æ–º –∏–∑-–∑–∞ rate limiting
    if (bot && typeof bot.close === 'function') {
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        await new Promise(resolve => setTimeout(resolve, 1000));
        bot.close();
      } catch (closeError) {
        // Connection might already be closed
      }
    }
  } catch (error) {
    console.error('Error force stopping bot:', error);
  }
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const startBot = async () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const isConnected = await checkDBConnection();
    if (!isConnected) {
      // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
      let attempts = 0;
      while (mongoose.connection.readyState !== 1 && attempts < 30) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        attempts++;
      }
      
      if (mongoose.connection.readyState !== 1) {
        throw new Error('MongoDB connection timeout');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!token) {
      throw new Error('Telegram bot token is not configured');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (–±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
    try {
      const me = await bot.getMe();
    } catch (launchError) {
      console.error('Error checking bot status:', launchError);
      
      // –ï—Å–ª–∏ —ç—Ç–æ rate limiting, –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
      if (launchError.code === 'ETELEGRAM' && launchError.response && launchError.response.statusCode === 429) {
        const retryAfter = launchError.response.headers['retry-after'] || 60;
        
        await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
        
        try {
          const me = await bot.getMe();
        } catch (retryError) {
          console.error('Error after rate limit retry:', retryError);
          throw retryError;
        }
      } else {
        throw launchError;
      }
    }
    
  } catch (error) {
    console.error('Error starting Telegram bot:', error);
    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId
const linkUserToChat = async (userId, chatId) => {
  try {
    const user = await User.findById(userId);
    if (!user) {
      return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatId –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    user.telegramChatId = chatId;
    await user.save();
    
    return { success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω —Å Telegram' };
  } catch (error) {
    console.error('Error linking user to chat:', error);
    return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  bot,
  verifyCode,
  getVerificationStatus,
  startBot,
  linkUserToChat,
  autoVerifyPhoneNumber,
  forceStopBot
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  try {
    await forceStopBot();
  } catch (error) {
    console.error('Error during graceful shutdown:', error);
  }
  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
  setTimeout(() => {
    process.exit(0);
  }, 2000);
});

process.on('SIGTERM', async () => {
  try {
    await forceStopBot();
  } catch (error) {
    console.error('Error during graceful shutdown:', error);
  }
  // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
  setTimeout(() => {
    process.exit(0);
  }, 2000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å—Ä–∞–∑—É, –¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  setTimeout(() => {
    process.exit(1);
  }, 1000);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å—Ä–∞–∑—É, –¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  setTimeout(() => {
    process.exit(1);
  }, 1000);
});

// –ë–æ—Ç —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
// –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∑–∞–ø—É—Å–∫
